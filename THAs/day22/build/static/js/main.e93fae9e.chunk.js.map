{"version":3,"sources":["Components/Templates.jsx","Components/Meme.jsx","Components/App.jsx","index.js"],"names":["Template","templates","setMeme","className","map","template","onClick","style","backgroundImage","url","id","Meme","meme","useState","template_id","username","password","boxes","form","setForm","src","alt","Array","box_count","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","box","console","log","fetch","then","response","json","data","success","App","setTemplates","templateID","userName","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAkBeA,EAlBE,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAC1B,OACI,qBAAKC,UAAU,YAAf,SACKF,EAAUG,KAAI,SAAAC,GAAQ,OACnB,qBAAuBF,UAAU,WAAWG,QAAS,WACjDJ,EAAQG,IADZ,SAGI,qBAAKF,UAAU,QACXI,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAASI,IAAlB,SAJrBJ,EAASK,U,cCiDpBC,EAnDF,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMV,EAAc,EAAdA,QAAc,EACRW,mBAAS,CAC7BC,YAAaF,EAAKF,GAClBK,SAAU,WACVC,SAAU,YACVC,MAAO,KALqB,mBACzBC,EADyB,KACnBC,EADmB,KAuBhC,OACI,sBAAKhB,UAAU,OAAf,UACI,qBAAKiB,IAAKR,EAAKH,IAAKY,IAAI,SACxB,8BAEQ,YAAIC,MAAMV,EAAKW,YAAYnB,KAAI,SAACoB,EAAGC,GAAJ,OAC3B,uBAAmBC,KAAK,OAAOC,YAAW,uBAAkBF,EAAQ,GAAKG,SAAU,SAACC,GAChF,IAAMC,EAAWZ,EAAKD,MACtBa,EAASL,GAAS,CAAEM,KAAMF,EAAEG,OAAOC,OACnCd,EAAQ,2BAAKD,GAAN,IAAYD,MAAOa,OAHlBL,QAQxB,gCACI,wBAAQnB,QA9BC,WACjB,IAAIG,EAAG,4DAAwDS,EAAKJ,YAA7D,qBAAqFI,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMb,KAAI,SAAC8B,EAAKT,GACjBhB,GAAG,iBAAcgB,EAAd,mBAA8BS,EAAIH,SAEzCI,QAAQC,IAAI3B,GAEZ4B,MAAM5B,GACD6B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAAG,GAECA,EAAKC,SACJxC,EAAQ,2BAAIU,GAAL,IAAWH,IAAKgC,EAAKA,KAAKhC,WAkBrC,2BACA,wBACIH,QAAS,WACLJ,EAAQ,OAFhB,oCCHDyC,MAhCf,WAAgB,IAAD,EACuB9B,mBAAS,IADhC,mBACJZ,EADI,KACO2C,EADP,OAEa/B,mBAAS,MAFtB,mBAEJD,EAFI,KAEEV,EAFF,OAIaW,mBAAS,CAC7BgC,WAAY,GACZC,SAAU,SACV9B,SAAU,KAPH,mBAmBb,OAnBa,UAUX+B,qBAAU,WACNV,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAACG,GAEHG,EAAaH,EAAKA,KAAKO,YAE5B,IAGD,sBAAK7C,UAAU,MAAf,UACE,iDACU,OAATS,EACG,cAAC,EAAD,CAAUX,UAAWA,EAAWC,QAASA,IAEzC,cAAC,EAAD,CAAMU,KAAMA,EAAMV,QAASA,QC3BvC+C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e93fae9e.chunk.js","sourcesContent":["const Template = ({templates, setMeme}) => {\r\n    return (\r\n        <div className=\"templates\">\r\n            {templates.map(template => (\r\n                <div key={template.id} className=\"template\" onClick={() => {\r\n                    setMeme(template);\r\n                }}>\r\n                    <div className=\"image\"\r\n                        style={{backgroundImage: `url(${template.url})`}}     \r\n                        >\r\n\r\n                        </div>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Template;","import { useState } from \"react\";\r\n\r\nconst Meme = ({ meme, setMeme }) => {\r\n    const [form, setForm] = useState({\r\n        template_id: meme.id,\r\n        username: \"psycho-M\",\r\n        password: \"imgflipTP\",\r\n        boxes: [],\r\n    });\r\n\r\n    const generateMeme = () => {\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`;\r\n        form.boxes.map((box, index) => {\r\n            url += `&boxes[${index}][text]=${box.text}`;\r\n        });\r\n        console.log(url);\r\n\r\n        fetch(url)\r\n            .then((response) => response.json())\r\n            .then(data => {\r\n                // console.log(data);\r\n                if(data.success)\r\n                    setMeme({...meme, url: data.data.url});\r\n            });\r\n    }\r\n    return (\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"meme\" />\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((_, index) => (\r\n                        <input key={index} type=\"text\" placeholder={`Meme Caption ${index + 1}`} onChange={(e) => {\r\n                            const newBoxes = form.boxes;\r\n                            newBoxes[index] = { text: e.target.value };\r\n                            setForm({ ...form, boxes: newBoxes })\r\n                        }} />\r\n                    ))\r\n                }\r\n            </div>\r\n            <div>\r\n                <button onClick={generateMeme}>Generate Meme</button>\r\n                <button\r\n                    onClick={() => {\r\n                        setMeme(null);\r\n                    }}\r\n                >\r\n                    Choose Template\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Meme;","\nimport { useState, useEffect } from 'react';\nimport '../css/App.css';\nimport Template from './Templates';\nimport Meme from './Meme';\n\nfunction App() {\n    const [templates, setTemplates] = useState([]);\n    const [meme, setMeme] = useState(null);\n\n    const [form, setForm] = useState({\n        templateID: '',\n        userName: 'teasty',\n        password: ''\n    });\n\n    useEffect(() => {\n        fetch(\"https://api.imgflip.com/get_memes\")\n        .then(response => response.json())\n        .then((data) => {\n            // console.log(data.data.memes);\n            setTemplates(data.data.memes);\n        })\n    }, []);\n\n  return(\n      <div className=\"App\">\n        <h1>Meme Generator!</h1>\n        {meme === null ? (\n            <Template templates={templates} setMeme={setMeme} />\n        ) : (\n            <Meme meme={meme} setMeme={setMeme}/>\n        )}\n        \n      </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}